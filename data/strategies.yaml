- title: "Priming Research Notes"
  steps: |
    1. Use the `notes_search_tool` to assimilate what you currently know about the project.
    2. Use the `list_files_tool` to retrieve all files in the project.
    3. Use the `file_info_tool` to summarize the contents of any `README.md` files.
    4. Use the `file_search_tool` to search for any documentation or notes related to the project.
    5. Evaluate the project structure; identify and document key directories and files.
    6. Use your file tools to explore the code base and try to identify organizational patterns.
    7. Use your file tools to identify external dependencies.
    8. **Planner: categorize and organize all of the research and use the `notes_save_tool` to save your findings.**
    9. Respond with a detailed outline of your findings.

- title: "Codebase Exploration and Understanding"
  steps: |
    1. Use the `file_search_tool` to perform a semantic search for `$X` or `$TOPIC` across the project files.
    2. If the user specifies a module or file, use the `file_info_tool` to summarize its purpose.
    3. If no specific file is mentioned, list relevant files using `file_list_tool` and identify candidates based on their names or summaries.
    4. Use the `file_contents_tool` to fetch key files or relevant excerpts.
    5. Analyze the flow and context of `$VARIABLE` or `$STRUCT` using references from search results.
    6. If git tools are available, consider using `git_log_tool` to explore the history of relevant files or functions.
    7. Synthesize a concise and actionable response summarizing findings and next steps.

- title: "Debugging and Troubleshooting"
  steps: |
    1. Analyze the Error Context:
       - If `$STACKTRACE` or `$ERROR` is provided, use `file_search_tool` to locate the associated line numbers, modules, or functions in the codebase. Focus on identifying the source of the issue.
       - Take note of any assumptions that can safely be made based on the query or programming language (e.g. immutability, type safety).
    2. Investigate Specific Identifiers:
       - If a specific function, method, or constant is mentioned:
         - Use `file_info_tool` to retrieve its definition and inspect its surrounding context (e.g., imports, dependencies, or usage patterns).
         - Use `file_search_tool` to locate references to the identifier throughout the project.
    3. Trace Code Relationships:
       - Use `file_spelunker_tool` to analyze upstream callers or downstream callees of `$FUNCTION`. Leverage the prebuilt call map to trace function interactions, dependencies, and affected pathways.
    4. Analyze Code History:
       - Use `git_pickaxe_tool` to search the commit history for changes introducing `$BUG` or `$ERROR`. Prioritize:
         - Lines or functions relevant to the stack trace or function mentioned.
         - Commit messages and diffs for context.
       - Supplement with other git tools (e.g., `git_log_tool`, `git_show_tool`) for broader or specific commit details.
       - **Important**: Only use Git tools if they are included in the available tools list.
    5. Correlate Findings Across Tools:
       - Cross-reference results from `file_search_tool`, `file_info_tool`, and `file_spelunker_tool` to establish a clear picture of:
         - Which modules or functions are likely involved.
         - How changes in the codebase might correlate with the observed bug.
    6. Detailed Root Cause Analysis:
       - Never respond with instructions for the user to troubleshoot on their own unless you can't find anything useful.
         - Explain that you were unable to find any possible causes
         - Suggest locations to add printf debugging to help identify the issue
         - Write unit test cases to reproduce the error for the user
       - Provide a detailed explanation of the root cause, including:
         - Specific references to files, functions, or commits.
         - Hypotheses based on tool outputs (e.g., a faulty function call, a breaking change).
       - If no root cause could be identified:
         - Clearly note in bold that you were unable to find the root cause.
         - Recommend further steps for debugging or troubleshooting
           - Write a test case to reproduce the error
           - Cite locations in the code to insert printf-debugging or logging

- title: "Code Flow and Relationships"
  steps: |
    1. Use the `file_spelunker_tool` to map the logical flow and identify callers or callees of `$X` and `$Y`.
    2. Use `file_search_tool` to locate semantic matches for `$X` and `$Y` in project files to identify references.
    3. If detailed analysis is needed, fetch the full contents of relevant files using `file_contents_tool`.
    4. Supplement insights by reviewing related file summaries via `file_info_tool`.
    5. Use git tools (e.g., `git_log_tool`) ONLY if explicitly available, to trace historical changes or commits associated with `$X` or `$Y`.
    6. Compile a step-by-step logical flow or dependency graph between `$X` and `$Y`.

- title: "Test and Build Information"
  steps: |
    1. Use `file_search_tool` to locate references to "tests," "CI," or "dependencies" in files and directories.
    2. If a specific `$FEATURE` is mentioned, search for test files or test-related comments.
    3. Use `file_list_tool` to identify `README`, configuration files (e.g., `docker-compose.yml`, `.env`, `Makefile`), or CI scripts.
    4. Use `file_contents_tool` to examine key files such as `README.md` or `build` scripts for instructions.
    5. If git tools are available, inspect commit history (`git_log_tool`) to identify recent CI or test changes.
    6. Summarize testing or build instructions, linking dependencies or configurations to their usage.

- title: "Version History and Changes"
  steps: |
    1. If git tools are available, use `git_log_tool` to identify when `$FUNCTION` or `$MODULE` was added or modified. DO NOT use git tools if not listed in the available tools.
    2. Use `git_pickaxe_tool` to search commit diffs for `$CODE_SNIPPET` or `$FUNCTION`.
    3. Use `file_info_tool` to cross-reference definitions or modifications in relevant files.
    4. If the project is not a git repository, rely on `file_search_tool` and `file_list_tool` to approximate relevant files.
    5. Summarize findings with commit details, authors, and reasons (if documented).

- title: "Semantic Search and High-Level Summaries"
  steps: |
    1. Use `file_search_tool` to perform a semantic search for `$TOPIC` or `$FEATURE` in the project.
    2. Summarize findings using AI-generated summaries of matched files, fetched via `file_info_tool`.
    3. Identify patterns, libraries, or dependencies from related files or their comments.
    4. If necessary, fetch full files using `file_contents_tool` to extract implementation details.
    5. If git tools are available, use them for historical context (e.g., `git_log_tool`).
    6. Compile a clear, high-level summary for the user, referencing specific files or patterns.

- title: "Operational and Setup Tasks"
  steps: |
    You will make inferences about how to perform specific tasks based on the codebase and available documentation.
    This will require you to identify entry points, configuration files, and setup instructions, and use those to logically infer the steps needed to complete the task described by the user's query.
    1. Use `file_list_tool` to locate setup-related files (`README.md`, `.env`, `docker-compose.yml`, etc.).
    2. Search for mentions of "setup," "installation," or `$SERVICE` using `file_search_tool`.
    3. Use `file_info_tool` to summarize key configuration files and settings.
    4. If available, examine file contents using `file_contents_tool` for detailed instructions.
    5. If git tools are available, examine setup-related commits for historical context.
    6. Provide a step-by-step setup guide based on extracted information.

- title: "Documentation and Metadata"
  steps: |
    1. Use `file_list_tool` to identify documentation files such as `README.md`, `CONTRIBUTING.md`, or guides.
    2. Perform a semantic search using `file_search_tool` for mentions of `$FEATURE`, `$MODULE`, or `$SETUP`.
    3. Use `file_info_tool` to summarize documentation sections or metadata relevant to the query.
    4. If detailed content is needed, use `file_contents_tool` to extract specific sections or guides.
    5. Synthesize an answer by compiling key documentation references.

- title: "Code Review and Analysis"
  steps: |
    1. Use `git_diff_branch_tool` to retrieve a diff between `$TOPIC_BRANCH` and `$BASE_BRANCH` (default to `origin/main` unless specified by the user).
    2. Summarize the changes by extracting key additions, deletions, and modifications. Highlight files and functions with significant changes.
    3. Use `git_show_tool`, `file_contents_tool`, `file_info_tool`, and `file_search_tool` to cross-reference affected files or functions for their context and purpose within the project.
    4. If relevant, trace dependencies or relationships using `file_spelunker_tool` to understand downstream or upstream impacts.
    5. Identify potential issues, but generally restrict your analysis to the code being changed
      - Do focus on:
        - Logical errors or inconsistencies
        - Poor separation of concerns
        - Conflicts with existing functionality
        - Missing test cases for new features or changes
        - Unnecessary complexity introduced in the code
        - Spelling errors, typos, or inconsistent naming conventions
        - Missing documentation or comments
      - Do not focus on:
        - Separation of concerns in the codebase as a whole
        - Missing test cases in the code base as a whole
    6. Synthesize a review summary with:
      - Key changes.
      - Observed strengths and areas for improvement.
      - Suggestions for additional testing, refactoring, or documentation.
    7. NOTE that your other git tools may refer to local or remote versions of files depending on their arguments, so be cautious when using them for code review purposes.

- title: Documenting Code
  steps: |
    1. Set Context:
       - Use `file_list_tool` to identify all files in the same directory or namespace as `$MODULE`, `$FEATURE`, or `$FILE`
       - Use `file_search_tool` to query the namespace for comprehensive background information, which can help determine next steps
       - Refine those findings further with the `file_info_tool`.
       - Search for existing documentation using `file_search_tool` to understand what is already covered
    2. Plan Structure:
       - Start the documentation with a high-level overview:
         - What is the purpose of the `$FEATURE` or `$MODULE`?
         - How does it fit into the larger project?
       - Break the explanation into layers:
         1. Overall Concept: A concise introduction to the feature or module
         2. Key Features or Components: A list of main functionalities, components, behaviors, or use cases
         3. Details of Subcomponents: Drill down into specific files, modules, or functions
         4. Identify relationships between components and how they interact
       - Ensure logical flow: from the general purpose to specific implementation details
       - Ensure structured content: use bullet points, code snippets, and examples for clarity
       - Use visuals: use diagrams, flow charts, tables, example code snippets, and tree diagrams to illustrate complex relationships
    3. Gather Supporting Information:
       - Use `file_contents_tool` to fetch examples or critical sections of code for inclusion in the documentation
       - Include patterns, libraries, or dependencies using `file_search_tool`
       - Cross-reference with related sections of the project using `file_spelunker_tool` to identify dependencies or relationships
    4. Formatting the Document:
       - Use the following outline:
         - Introduction: Summarize the purpose and role of the feature/module
         - Usage Examples: Provide simple and advanced examples to demonstrate functionality
         - API or Key Functions: Document each significant function or API with:
           - Parameters
           - Expected behavior
           - Example usage
         - Related Modules or Features: Reference related parts of the codebase for context
         - Troubleshooting/FAQs: Address common pitfalls or questions
         - Version/History (Optional): Note when and why major changes were introduced (if git tools are available)
    5. Create or Update README.md:
       - Check for an existing `README.md` in the same directory or namespace. If absent:
         - Create one following the structure above
         - Integrate the new information with any existing project-level README, linking to the specific module's section
    6. Review and Summarize:
       - Generate a concise summary for the user with a list of files and components documented
       - Provide recommendations for further documentation efforts, such as creating tutorials or in-depth guides

    #### Key Points to Emphasize:
    - Documentation should always aim for clarity and completeness but avoid unnecessary verbosity.
    - Top-down explanations are most effective: general concepts first, then specific details.
    - Explain entities in terms of Components, Behaviors, Relationships, and Dependencies.
    - Ensure the documentation is detailed and includes examples to aid understanding.
